#include <iostream>
#include <string>
#include <vector>
#include <fstream>
#include <algorithm>

class Employee {
protected:
    int id;
    std::string name;
    int age;
    double salary;
public:
    Employee(int _id, const std::string& _name, int _age, double _salary)
        : id(_id), name(_name), age(_age), salary(_salary) {}

    virtual void displayInfo() const {
        std::cout << "ID: " << id << ", Tên: " << name
                  << ", Tuổi: " << age << ", Lương: " << salary << std::endl;
    }

    virtual double getSalary() const {
        return salary;
    }

    int getId() const {
        return id;
    }

    std::string getName() const {
        return name;
    }

    int getAge() const {
        return age;
    }

    virtual ~Employee() {} // Thêm hàm hủy ảo
};

class Manager : public Employee {
private:
    int teamSize;
public:
    Manager(int _id, const std::string& _name, int _age, double _salary, int _teamSize)
        : Employee(_id, _name, _age, _salary), teamSize(_teamSize) {}

    void displayInfo() const override {
        Employee::displayInfo();
        std::cout << "Số nhân viên quản lý: " << teamSize << std::endl;
    }

    double getSalary() const override {
        return salary + (teamSize * 1000); // Phụ cấp quản lý
    }
};

class HourlyEmployee : public Employee {
private:
    int hoursWorked;
    double hourlyRate;
public:
    HourlyEmployee(int _id, const std::string& _name, int _age, double _hourlyRate, int _hoursWorked)
        : Employee(_id, _name, _age, _hourlyRate * _hoursWorked), 
          hoursWorked(_hoursWorked), 
          hourlyRate(_hourlyRate) {}

    double getSalary() const override {
        return hourlyRate * hoursWorked;
    }
};

class Department {
private:
    std::string name;
    std::vector<Employee*> employees;
public:
    Department(const std::string& _name) : name(_name) {}

    void addEmployee(Employee* emp) {
        employees.push_back(emp);
    }

    void displayEmployees() const {
        std::cout << "Phòng ban: " << name << std::endl;
        for (const auto& emp : employees) {
            emp->displayInfo();
            std::cout << "------------------------" << std::endl;
        }
    }

    Employee* findEmployeeByName(const std::string& name) const {
        for (const auto& emp : employees) {
            if (emp->getName() == name) {
                return emp;
            }
        }
        return nullptr;
    }

    Employee* findEmployeeById(int id) const {
        for (const auto& emp : employees) {
            if (emp->getId() == id) {
                return emp;
            }
        }
        return nullptr;
    }

    void sortEmployeesBySalary() {
        std::sort(employees.begin(), employees.end(), [](Employee* a, Employee* b) {
            return a->getSalary() < b->getSalary();
        });
    }

    void sortEmployeesByAge() {
std::sort(employees.begin(), employees.end(), [](Employee* a, Employee* b) {
            return a->getAge() < b->getAge();
        });
    }

    ~Department() {
        for (auto emp : employees) {
            delete emp;
        }
    }
};

class Company {
private:
    std::vector<Employee*> employees;
public:
    void addEmployee(Employee* emp) {
        employees.push_back(emp);
    }

    void displayAllEmployees() const {
        for (const auto& emp : employees) {
            emp->displayInfo();
            std::cout << "------------------------" << std::endl;
        }
    }

    double getTotalSalary() const {
        double total = 0;
        for (const auto& emp : employees) {
            total += emp->getSalary();
        }
        return total;
    }

    void saveToFile(const std::string& fileName) const {
        std::ofstream file(fileName);
        if (file.is_open()) {
            for (const auto& emp : employees) {
                file << emp->getId() << "," << emp->getName() << ","
                     << emp->getAge() << "," << emp->getSalary() << std::endl;
            }
            file.close();
        } else {
            std::cout << "Không thể mở file!" << std::endl;
        }
    }

    void loadFromFile(const std::string& fileName) {
        std::ifstream file(fileName);
        if (file.is_open()) {
            int id, age = 0; // Khởi tạo age với giá trị 0
            double salary;
            std::string name;
            while (file >> id) {
                file.ignore(); // Bỏ qua dấu phẩy
                std::getline(file, name, ',');
                file >> age;
                file.ignore(); // Bỏ qua dấu phẩy
                file >> salary;
                employees.push_back(new Employee(id, name, age, salary));
            }
            file.close();
        } else {
            std::cout << "Không thể mở file!" << std::endl;
        }
    }

    ~Company() {
        for (auto emp : employees) {
            delete emp;
        }
    }
};

int main() {
    Company myCompany;

    // Tạo các phòng ban
    Department* hrDepartment = new Department("Nhân sự");
    Department* itDepartment = new Department("Công nghệ thông tin");

    // Thêm nhân viên
    hrDepartment->addEmployee(new Employee(1, "Nguyễn Văn A", 30, 10000000));
    hrDepartment->addEmployee(new Employee(2, "Trần Thị B", 25, 8000000));
    hrDepartment->addEmployee(new Manager(3, "Lê Văn C", 40, 20000000, 5));
    itDepartment->addEmployee(new HourlyEmployee(4, "Lê Văn D", 35, 50000, 160));

    // Hiển thị thông tin nhân viên
    std::cout << "Thông tin tất cả nhân viên trong phòng nhân sự:" << std::endl;
    hrDepartment->displayEmployees();

    std::cout << "Thông tin tất cả nhân viên trong phòng công nghệ thông tin:" << std::endl;
    itDepartment->displayEmployees();

    // Tính tổng lương
std::cout << "Tổng lương công ty: " << myCompany.getTotalSalary() << std::endl;

    // Lưu danh sách nhân viên vào file
    myCompany.saveToFile("employees.txt");

    // Đọc danh sách nhân viên từ file
    myCompany.loadFromFile("employees.txt");

    // Giải phóng bộ nhớ
    delete hrDepartment;
    delete itDepartment;

    return 0;
}
