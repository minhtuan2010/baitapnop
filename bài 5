#include <iostream>
#include <string>
#include <vector>
#include <algorithm>
#include <fstream>

class Employee {
protected:
    int id;
    std::string name;
    int age;
    double salary;

public:
    Employee(int _id, std::string _name, int _age, double _salary)
        : id(_id), name(_name), age(_age), salary(_salary) {}

    virtual void displayInfo() const {
        std::cout << "ID: " << id << ", Tên: " << name
                  << ", Tuổi: " << age << ", Lương: " << salary << std::endl;
    }

    virtual double getSalary() const {
        return salary;
    }

    int getId() const { return id; }
    std::string getName() const { return name; }
    int getAge() const { return age; }

    virtual ~Employee() {}
};

class Manager : public Employee {
private:
    int teamSize;

public:
    Manager(int _id, std::string _name, int _age, double _salary, int _teamSize)
        : Employee(_id, _name, _age, _salary), teamSize(_teamSize) {}

    void displayInfo() const override {
        Employee::displayInfo();
        std::cout << "Số nhân viên quản lý: " << teamSize << std::endl;
    }

    double getSalary() const override {
        return salary + (teamSize * 1000);
    }
};

class HourlyEmployee : public Employee {
private:
    double hourlyRate;  // Đổi thứ tự khai báo
    double hoursWorked;

public:
    HourlyEmployee(int _id, std::string _name, int _age, double _hourlyRate, double _hoursWorked)
        : Employee(_id, _name, _age, 0), hourlyRate(_hourlyRate), hoursWorked(_hoursWorked) {
        salary = hourlyRate * hoursWorked;
    }

    void displayInfo() const override {
        std::cout << "ID: " << id << ", Tên: " << name
                  << ", Tuổi: " << age << ", Lương: " << salary
                  << " (Lương theo giờ: " << hourlyRate << ", Giờ làm: " << hoursWorked << ")" << std::endl;
    }

    double getSalary() const override {
        return hourlyRate * hoursWorked;
    }
};

class Department {
private:
    std::string name;
    std::vector<Employee*> employees;

public:
    Department(std::string _name) : name(_name) {}

    void addEmployee(Employee* emp) {
        employees.push_back(emp);
    }

    void displayEmployees() const {
        std::cout << "Phòng ban: " << name << std::endl;
        for (const auto& emp : employees) {
            emp->displayInfo();
            std::cout << "------------------------" << std::endl;
        }
    }

    ~Department() {
        for (auto emp : employees) {
            delete emp;
        }
    }
};

class Company {
private:
    std::vector<Department> departments;

public:
    void addDepartment(const Department& dept) {
        departments.push_back(dept);
    }

    void displayAllDepartments() const {
        for (const auto& dept : departments) {
            dept.displayEmployees();
        }
    }
};

int main() {
    Company myCompany;

    // Tạo phòng ban và thêm nhân viên
    Department sales("Bán hàng");
sales.addEmployee(new Employee(1, "Nguyễn Văn A", 30, 10000000));
    sales.addEmployee(new Manager(2, "Trần Thị B", 25, 20000000, 5));

    Department hr("Nhân sự");
    hr.addEmployee(new HourlyEmployee(3, "Lê Văn C", 40, 100000, 200));

    myCompany.addDepartment(sales);
    myCompany.addDepartment(hr);

    std::cout << "Thông tin tất cả phòng ban:" << std::endl;
    myCompany.displayAllDepartments();

    return 0;
}
