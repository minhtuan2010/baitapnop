#include <iostream>
#include <string>
#include <vector>

class Borrowable {
protected:
    std::string title;
    bool isBorrowed;

public:
    Borrowable(std::string t) : title(t), isBorrowed(false) {}

    virtual void displayInfo() const {
        std::cout << "Tiêu đề: " << title 
                  << (isBorrowed ? " (Đang mượn)" : " (Có sẵn)") << std::endl;
    }

    virtual void borrow() {
        if (!isBorrowed) {
            isBorrowed = true;
            std::cout << "Bạn đã mượn: " << title << std::endl;
        } else {
            std::cout << title << " đã bị mượn." << std::endl;
        }
    }

    virtual void returnItem() {
        if (isBorrowed) {
            isBorrowed = false;
            std::cout << "Bạn đã trả: " << title << std::endl;
        } else {
            std::cout << title << " không được mượn." << std::endl;
        }
    }

    std::string getTitle() const { return title; } // Thêm phương thức getTitle

    virtual ~Borrowable() = default;
};

class Book : public Borrowable {
public:
    Book(std::string title) : Borrowable(title) {}

    void displayInfo() const override {
        std::cout << "Sách - ";
        Borrowable::displayInfo();
    }
};

class Magazine : public Borrowable {
public:
    Magazine(std::string title) : Borrowable(title) {}

    void displayInfo() const override {
        std::cout << "Tạp chí - ";
        Borrowable::displayInfo();
    }
};

class Library {
private:
    std::vector<Borrowable*> items;

public:
    void addItem(Borrowable* item) {
        items.push_back(item);
    }

    void displayItems() const {
        for (const auto& item : items) {
            item->displayInfo();
        }
    }

    void borrowItem(const std::string& title) {
        for (auto& item : items) {
            if (item->getTitle() == title) { // Sử dụng getTitle() ở đây
                item->borrow();
                return;
            }
        }
        std::cout << "Không tìm thấy mục có tiêu đề: " << title << std::endl;
    }

    void returnItem(const std::string& title) {
        for (auto& item : items) {
            if (item->getTitle() == title) { // Sử dụng getTitle() ở đây
                item->returnItem();
                return;
            }
        }
        std::cout << "Không tìm thấy mục có tiêu đề: " << title << std::endl;
    }

    ~Library() {
        for (auto item : items) {
            delete item;
        }
    }
};

int main() {
    Library myLibrary;
    myLibrary.addItem(new Book("C++ Programming"));
    myLibrary.addItem(new Magazine("Tech Trends"));

    std::cout << "Danh sách tài liệu trong thư viện:" << std::endl;
    myLibrary.displayItems();

    myLibrary.borrowItem("C++ Programming");
    myLibrary.borrowItem("Tech Trends");

    std::cout << "\nDanh sách tài liệu sau khi mượn:" << std::endl;
    myLibrary.displayItems();
myLibrary.returnItem("C++ Programming");
    std::cout << "\nDanh sách tài liệu sau khi trả:" << std::endl;
    myLibrary.displayItems();

    return 0;
}
